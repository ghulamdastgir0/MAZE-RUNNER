[org 0x100]

jmp start
;maze1 memory location
maze1:	db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
		db 0xb2,0xb2,0x87,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0x87,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xb2,0xb2,0xb2,0xff,0x87,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
		db 0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xff,0x87,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xe8,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
		db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
		db 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
		db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2

;maze 2
maze2:		db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0x87,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xe8,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
		
;maze 3
maze3:
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
			db 0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe8,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0x87,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xe8,0xff,0xff,0xff,0xb2,0xb2,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2
			db 0xb2,0xb2,0xe0,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0x87,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xb2,0xb2,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xe8,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xe8,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0x87,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
;maze 4
maze4:
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
			db 0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe8,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0x87,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xe8,0xb2,0xb2,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xe8,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xe8,0xff,0xb2,0xb2,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0x87,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0x87,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0x87,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xb2,0xb2,0xe0,0xff,0xb2,0xb2,0xff,0xff,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe8,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
		
;maze 5
maze5:
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2
			db 0xb2,0xb2,0xe8,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xe8,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0x87,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xe8,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xb2,0xb2,0x87,0xff,0xff,0xe0,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0x87,0xff,0xb2,0xb2,0xb2,0xb2,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xe8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xb2,0xb2,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xff,0xff,0xb2,0xb2,0xb2,0xb2,0xff,0xff,0xb2,0xb2
			db 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe8,0xb2,0xb2,0xff,0xff,0xff,0xff,0xff,0xff,0xb2,0xb2,0xff,0xff,0xff,0xff
			db 0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2,0xb2

player: 	dw 0x01
oldisr: 	dd 0
oldtimer:	dd 0
randNum:	db 0
winning_text:	db ' Congragulations YOU WIN!!'
losing_text:	db 'Monster Eats You!!'
time_end_text:	db 'Time has ended'
scoring_msg:	db 'FINAL SCORE:'		
starting_m1: db 'WELCOME TO COAL PROJECT 2024'
starting_m2: db 'Created BY:'
starting_m3: db 'GHULAM DASTGIR (23L-0742)'
starting_m4: db 'ZAYAN AMJAD (23L-0721)'
starting_m5: db 'PRESS ANY KEY TO START'
score: db 'score: '
count: dw 0
seconds: db 0,0
minutes: db 0
tickcount: dw 0
message: db 'time:',0
endofGAME: dd 0
tss1: db 'Take a challange'
tss2: db 'Enter the minitues (1-9)' 
input: db 0
timer_flag: db 0


printstr:
	push bp
	mov bp,sp
	pusha
	mov ah,0x13
	mov al,1
	mov bh,0
	mov bl,[bp+4] ;attribute
	mov cx,[bp+6] ;length
	mov dx,[bp+8] ;location
	push cs
	pop es
	mov si,[bp+10]
	mov bp,si ;string
	int 0x10
	
	popa
	pop bp
	ret 8


clrscr:
    push es
    push ax
    push cx
    push di
    mov ax, 0xb800
    mov es, ax
    xor di, di
    mov ah, 0x07
	mov al,0xff
    mov cx, 2000
    cld 
    rep stosw
    pop di
    pop cx
    pop ax
    pop es
    ret

;Starting screen
startup:
	pusha
	mov ax, starting_m1
	push ax
	mov ax, 0x518 ; loc
	push ax
	mov ax, 28 ; length
	push ax
	mov ax, 0x70 ;attribute
	push ax
    call printstr
	
	mov ax, starting_m2
	push ax
	mov ax, 0x0820 ; loc
	push ax
	mov ax, 11 ; length
	push ax
	mov ax, 0x09	;attribute
	push ax
    call printstr
	
	mov ax, starting_m3
	push ax
	mov ax, 0x0A19 ; loc
	push ax
	mov ax, 25 ; length
	push ax
	mov ax, 0x09 ;attribute
	push ax
    call printstr
	
	mov ax, starting_m4
	push ax
	mov ax, 0x0B19 ; loc
	push ax
	mov ax, 22 ; length
	push ax
	mov ax, 0x09 ;attribute
	push ax
	call printstr
	
	mov ax, starting_m5
	push ax
	mov ax, 0x0D19 ; loc
	push ax
	mov ax, 22 ; length
	push ax
	mov ax, 0x8E ;attribute
	push ax
	call printstr
	
	popa
	ret

;Scoring printing
scoring:
    push bp
    mov bp, sp
    pusha
	push es
	
	mov ax,0xb800
	mov es,ax
    mov ax, [count]
	cmp ax,0
	jg noZero
	mov ax,0
	mov ah,0x0A
	mov al,'0'
	mov di,[bp + 4]
	mov [es:di],ax
	jmp endScore
	
noZero:
    mov bx, 10
    mov cx, 0
convert_to_digits:
    xor dx, dx
    div bx
    add dl, '0'
    push dx
    inc cx
    test ax, ax
    jnz convert_to_digits

    mov di, [bp+4]
print_digits:
    pop dx
    mov dh, 0x0A
    mov [es:di], dx
    add di, 2
    loop print_digits
endScore:
    pop es
	popa
    pop bp
    ret 2	

;timer
printTime:
	push ax
	push di
	push bx
	push si
	
	mov ax,0xB800
	mov es,ax
	xor ax,ax
	
	mov si,message
	mov ah,0x0e
	mov cx,5
	mov di,600
	
printM:
	lodsb
	stosw
	loop printM
	
	mov al,[minutes]
	add al,0x30
	stosw
	mov al,':'
	stosw
	mov al,[seconds + 1]
	add al,0x30
	stosw
	mov al,[seconds]
	add al,0x30
	stosw
	
	pop si
	pop bx
	pop di
	pop ax
	
	ret
	
timer:
	push ax
	push bx
	inc word [cs:tickcount]
	cmp word [cs:tickcount],18
	jne skipTime
	mov word [cs:tickcount],0
	inc byte [cs:seconds]
	cmp byte [cs:seconds],10
	jne skipTime
	mov byte [cs:seconds],0
	inc byte [cs:seconds + 1]
	cmp byte [cs:seconds + 1],6
	jne skipTime
	mov byte [cs:seconds + 1],0
	inc byte [cs:minutes]
	mov bl,[input]
	cmp byte [cs:minutes],bl
	je displayEndofTime
	
skipTime:
	call printTime

endingTimer:
	mov al,0x20
	out 0x20,al
	
	pop ax
	pop bx
	iret
	
displayEndofTime:
    xor ax, ax
    mov es, ax
    cli
    mov ax, [oldtimer]
    mov [es:8*4], ax
    mov ax, [oldtimer+2]
    mov [es:8*4+2], ax
    sti  ; Restore interrupts for safe exit

    mov byte [timer_flag], 1

    call clrscr
    mov ax, time_end_text
    push ax
    mov ax, 0x918
    push ax
    mov ax, 14
    push ax
    mov ax, 0xc
    push ax
    call printstr
	mov al,0x20
	out 0x20,al
	sub sp,10
    call endGame
;Maze row printing
singleRow:
    ; Print a single line of the maze
    push bp
    mov bp, sp
    pusha
	mov ax,0xB800
	mov es,ax
	mov di,[bp+6]
	mov si,[bp+4]
	mov cx,44 ; number of columns
	cld 
	
nextchar:
	lodsb
	cmp al,0xb2
	je wall
	cmp al,0x87
	je enemy
	cmp al,0xe8
	je collectables
	cmp al,0xe0
	je super
wall:
	mov ah,0xC
	jmp load
enemy:
	mov ah,0x09
	jmp load
collectables:
	mov ah,0xe
	jmp load
super:
	mov ah,0x5
	
load:
	stosw
	loop nextchar
	
    popa
    pop bp
    ret 4

maze:
    ; Print all maze lines
    push bp
    mov bp, sp
    pusha	
    mov si, 6
    mov cx, 15	;rows number
    mov ax, 674 ; starting location of maze
	mov si,[bp+4]
loop1:
    push ax
    push si
    call singleRow
    add si, 44 ; to move to the next line
    add ax, 160
    loop loop1
	
    popa
    pop bp
    ret 2

movement:
	push bp
	mov bp,sp
	pusha
	
	mov ax,0xb800
	mov es,ax
	mov di,[bp+4]	;location
	mov al,[player]
	mov ah, 0x07
    mov [es:di ], ax
	
mainloop:
	mov ah,0
	int 0x16
	cmp ah,0x4b
	je NEAR left
	cmp ah,0x4d
	je NEAR right
	cmp ah,0x50
	je NEAR downTemp
	cmp ah,0x48
	je NEAR up
	cmp al,27
	je NEAR endTempo
	cmp byte [timer_flag],1
	je NEAR endTempo
	
	jmp NEAR mainloop
	
move_check:
	mov si,di
    mov ax,di
    add di, bx
    cmp byte [es:di], 0xb2
    je NEAR invalid_move
	mov cx,[bp + 4]
	sub cx,2
    cmp di, cx
    je NEAR invalid_move
	cmp byte [es:di],0xe0
	je superMan
	cmp byte [es:di],0x99
	je teleport
    cmp di, [bp+6]
    je winner
	cmp byte [es:di],0x87
	je NEAR lost
	cmp byte [es:di], 0xe8
	jne skip
	add byte [count],10
	push 492
	call scoring
	jmp skip

teleport:
	sub word [count],10
    jmp NEAR winner

tempMain:
	jmp mainloop
	
downTemp:
	jmp down

skip:
    mov word [es:si], 0xff
	mov al,[player]
	mov ah, 0x07
    mov [es:di], ax
	
    jmp mainloop

superMan:
	mov word [es:si], 0xff
	mov al,[player]
	mov ah, 0x07
    mov [es:di], ax
	
	mov al,0x99
	mov ah,0x5
	mov word [es:si],ax
	
    jmp tempMain

left:
    mov bx, -2
    jmp move_check

right:
    mov bx, 2
    jmp move_check

endTempo:
	call clrscr
	jmp endisr

up:
    mov bx, -160
    jmp move_check

down:
    mov bx, 160
    jmp move_check

invalid_move:
    mov di,ax
    jmp mainloop

winner:
	call clrscr
	
	mov ax, winning_text
	push ax
	mov ax, 0x918
	push ax
	mov ax, 26
	push ax
	mov ax, 0x0A
	push ax
    call printstr
    
	jmp endisr

lost:
	call clrscr
	
	mov ax, losing_text
	push ax
	mov ax, 0x918
	push ax
	mov ax, 18
	push ax
	mov ax, 0xc
	push ax
    call printstr
    

endisr:
	popa
    pop bp
    ret 4
	
;rand num generator
GenRandNum:
    push bp
    mov bp, sp
    push cx
    push ax
    push dx

    mov ah, 00h    ; interrupts to get system time
    int 1Ah        ; CX:DX now hold number of clock ticks since midnight
    mov ax, dx
    xor dx, dx
    mov cx, 5      ; change this to 5 for the range 0-4
    div cx         ; here dx contains the remainder of the division from 0 to 4
    add dl, 1    ; to ASCII from '0' to '4'

    mov word [randNum], dx
    pop cx
    pop ax
    pop dx
    pop bp
    ret	
	
timer_screen:
	pusha
rescreen:
	call clrscr
	mov ax, tss1
	push ax
	mov ax, 0x0822 ; loc
	push ax
	mov ax, 16 ; length
	push ax
	mov ax, 0x87 ;attribute
	push ax
	call printstr

	mov ax, tss2
	push ax
	mov ax, 0xA1F ; loc
	push ax
	mov ax, 24 ; length
	push ax
	mov ax, 0x09 ;attribute
	push ax
	call printstr
	
	mov ah,0
	int 0x16
	mov [input],al
	mov ax, input
	push ax
	mov ax, 0xB28 ; loc
	push ax
	mov ax, 1 ; length
	push ax
	mov ax, 0x07 ;attribute
	push ax
	call printstr
	
	cmp byte [input],'9'
	jg rescreen
	cmp byte [input],'1'
	jl rescreen
	SUB byte [input],'0'
	popa
	ret
start:
	call clrscr
	;Saving end game address
	mov ax,mainloop
	mov [endofGAME],ax
	mov ax,cs
	mov [endofGAME + 2],ax
	
	;Main screen
	call startup
	mov ah,0
	int 0x16
	call timer_screen
	mov ah,0
	int 0x16
	call clrscr
	mov ax, score
	push ax
	mov ax, 0x0300 ; loc
	push ax
	mov ax, 7 ; length
	push ax
	mov ax, 0x0A ;attribute
	push ax
	call printstr
	call GenRandNum
	
	MOV byte [randNum],3
	
	cmp byte [randNum],1
	je m1
	cmp byte [randNum],2
	je m2
	cmp byte [randNum],3
	je m3
	cmp byte[ randNum],4
	je m4
	cmp byte [randNum],5
	je m5
	
m1:
	mov ax, maze1
	push ax
	jmp fun
m2:
	mov ax, maze2
	push ax
	jmp fun
m3:
	mov ax, maze3
	push ax
	jmp fun
m4:
	mov ax, maze4
	push ax
	jmp fun
m5:
	mov ax, maze5
	push ax

fun:
	call maze
	
	;inturput hooking
	
	;timer hooking
	xor ax,ax
	mov es,ax
	mov ax,[es:8*4]
	mov [oldtimer],ax
	mov ax,[es:8*4 + 2]
	mov [oldtimer + 2],ax
	cli
	mov word [es:8*4],timer
	mov word [es:8*4 + 2],cs
	sti
	
	cmp byte [randNum],1
	je mov1
	cmp byte [randNum],2
	je mov2
	cmp byte [randNum],3
	je mov3
	cmp byte[ randNum],4
	je mov4
	cmp byte [randNum],5
	je mov5
	
mov1:
	mov ax,918 ;ending location of maze1
	push ax
	mov ax,2754 ;starting location of maze 1
	push ax
	call movement
	jmp endGame
	
mov2:
	mov ax,596 ;ending location of maze2
	push ax
	mov ax,2754 ;starting location of maze 2
	push ax
	call movement
	jmp endGame
	
mov3:
	mov ax,832 ;ending location of maze3
	push ax
	mov ax,2754 ;starting location of maze 3
	push ax
	call movement
	jmp endGame	
	
mov4:
	
	mov ax, 542;ending location of maze4
	push ax
	mov ax,2754 ;starting location of maze 4
	push ax
	call movement
	jmp endGame
	
mov5:
	mov ax,2840 ;ending location of maze1
	push ax
	mov ax,2754 ;starting location of maze 1
	push ax
	call movement
	
endGame:
	; Clear the screen before exiting
    call clrscr
	xor ax,ax
    mov es, ax        
    cli               
    mov ax, [oldtimer] 
    mov [es:8*4], ax   
    mov ax, [oldtimer+2] 
    mov [es:8*4+2], ax  
    sti                


	
	xor ax,ax
	;calculating score
	mov al,[minutes]
	mov bl,12
	mul bl
	sub [count],ax
	xor ax,ax
	mov al,[seconds + 1]
	mov bl,10
	mul bl
	xor bx,bx
	mov bl,[seconds]
	add ax,bx
	mov bl,5
	div bl
	mov ah,0
	sub [count],ax
	
	;final score and time
	call printTime
	mov ax, scoring_msg
	push ax
	mov ax, 0x9B8
	push ax
	mov ax, 12
	push ax
	mov ax, 0xc
	push ax
    call printstr
	
	push 1836
	call scoring
	
	mov ax,0x4c00
	int 0x21